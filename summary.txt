1.什么是java的三种技术架构
	JAVASE：完成桌面应用程序的开发，是其他两者的基础。
	JAVAEE：开发企业环境下的应用程序，主要针对web程序开发。
	JAVAME：开发电子消费产品和嵌入式设备，如手机中的程序。
2.JDK和JRE有什么区别
	JDK：java development kit，java的开发和运行环境，java的开发工具和jre。
	JRE：java Runtime environment，java程序的运行环境，Java运行的所需类库和VM（java虚拟机）。
3.javac和java命令分别完成什么
	javac：负责的是编译的部分，当执行javac命令时，会启动java的编译器程序，对指定扩展名的 .java文件进行编译，
		生成了jvm可以识别的字节码文件，也就是class文件，也就是java的运行程序。
	java：负责运行的部分，会启动jvm加载运行时所需要的类库，并对class文件进行执行。
4.对两个变量的数据进行互换，但不引入第三方变量
	加减：a = a + b ---- b = a - b ---- a = a - b
	异或：a = a ^ b ---- b = a ^ b ---- a = a ^ b
5.switch 后面的小括号中变量都可以为
	byte char short int
6.数组的表现形式
	int[] a = new int[10]
	int[] a = {1l,22,33}
	int[] a = new int[]{11,22,33}
7.java的内存分布
	寄存器
	本地方法区
	堆（heap）：用于存储数组和对象，也就是实体。所有的对象实例及数组都要在堆上分配。包括成员变量，new出来对象。
		特点：可以被多个线程共享，速度慢，灵活。
	栈（stack）：存放的是局部变量（函数中定义的变量，函数上的参数，语句中的变量）。对于基本的数据类型，
		存放的是变量的值；对于对象变量，存放的是堆内存的地址。
		特点：不可以被多个线程共享，但空间连续，速度快，不灵活。
	方法区（codeSegment）：堆里面的一部分。存放对象的方法（存放已被虚拟机加载的类信息：代码，静态变量，常量池）
		特点：可以被多个线程共享，速度慢，灵活。
8.主函数main的存在，仅为该类是否需要独立运行，如果不需要，主函数可以不用定义。
9.构造函数是在对象创建时，就被调用，用于初始化，而且初始化动作仅进行一次--swing加载界面功能代码都写在construction里面。
10.静态方法只能访问静态成员，不可以访问非静态成员：因为静态方法加载时，优先于对象存在，所以没有办法访问对象中的成员；静态方法中
	不能使用this，super关键字：因为this代表对象，而静态存在时，有可能没有对象，所以this无法使用。
11.成员变量和静态变量的区别：
	成员变量所属于对象，所以也可称为实例变量 --- 静态变量所属于类，所以称为类变量。
	成员变量在堆内存中 --- 静态变量在方法区中。
	成员变量随着对象创建而存在，对象回收而消失 --- 静态变量随着类的加载而存在，类的消失而消失。
	成员变量只能被对象调用 --- 静态变量可以被对象调用，也可以被类名调用。
	所以：成员变量可以成为对象的特有数据，静态变量成为对象的共享收据。
12.静态代码块 构造代码块 构造函数同时存在时的执行顺序
	静态代码块 ---> 构造代码块 ---> 构造函数
13.单例设计模式：保证一个类在内存中的唯一性。比如多个程序读取一个配置文件时。
	代码体现：私有化构造函数 --- 创建私有并静态的本类对象 --- 定义共有并静态的方法，返回该对象。
	饿汉式：class Single{
		private Single(){}
		private static Single s = new Single();
		public static Single getInstance(){
			return s;
		}
	}
	懒汉式：延迟加载方式
	class Single{
		private Single(){}
		private static Single s = null;
		public static Single getInstance(){
			if(s == null){
				s = new Single();
			}
			return s;
		}
	}
14.super和this
	super()和this()是否可以同时出现在构造函数中：不能，两个语句只能有一个定义在第一行，所以只能出现一个。
	为什么一定要定义在第一行：因为super和this都是调用构造函数，而构造函数用于初始化，所以初始化动作要最先完成。
15.子类覆盖父类时，必须要保证：子类方法的权限必须大于等于父类方法权限才可以实现继承，否则，编译失败。
16.final的特点
	这个关键字是一个修饰符，可以修饰类，方法，变量。
	被final修饰的类是一个最终类，不可以被继承。
	被final修饰的方法是一个最终方法，不可以被覆盖。
	别final修饰的变量是一个常量，只能赋值一次，而且在创建的的时候必须初始化。
17.抽象类abstract的特点
	抽象方法之定义方法声明，并不定义方法实现，无方法体abstract void show（）。
	抽象类不可以被创建对象（实例化） 不能用new关键字。
	抽象类只能被继承。
	抽象类中是否有构造函数：有，用于给子类对象进行初始化。
	抽象类是否可以定义非抽象的方法：可以。
	抽象关键字abstract和那些不可以共存：final private static 。
	抽象类中可不可以不定义抽象犯法：可以，抽象方法的目的仅仅为了不让该类创建对象。
18.接口
	接口中的成员都有固定的修饰符。
		成员变量：public static final
		成员方法：public abstract
	接口中有抽象方法，说明接口不可以被实例化。
	接口的子类必须实现了接口中所有的抽象方法后，该子类才可以实例化，否则，该子类还是一个抽象类。
	接口可以被多实现，这就是多重继承改良后的结果。
	接口可以多继承接口。
19.模板方法设计模式：
	解决的问题：当功能内部一部分实现时确定，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。
	abstract class GetTime{
		public final void getTime(){ //此功能如果不需要复写，可加final限定
			long start = System.currentTimeMillis();
			code(); //不确定的功能部分，提取出来，通过抽象方法实现
			long end = System.currentTimeMillis();
			System.out.println("毫秒是："+(end-start));
		}
		public abstract void code(); //抽象不确定的功能，让子类复写实现
	}
	class SubDemo extends GetTime{
		public void code(){ //子类复写功能方法
			for(int y=0; y<1000; y++){
				System.out.println("y");
			}
		}
	}
20.多态
	定义一个父类引用指向一个子类对象既可以使用子类强大的功能，又可以抽取父类的共性。
		父类类型的引用可以调用父类中定义的所有属性和方法，而对于子类中定义但父类中没有到方法，它无法调用。
		父类中的一个方法只有在父类中定义而子类中没有重写才会调用；如果子类重写了，就会去调用子类的方法，这就是动态连接。
	用instanceof<对象 instanceof 类型>判断对象是否实现了指定的接口或者继承了指定的父类。
21.多态在子父类成员上的体现
	成员变量：无论编译和运行，成员变量参考的都是引用变量所属的类中的成员变量。即编译运行都看=左边。
	成员函数：编译看=左边 ，运行看=右边。
	静态函数：编译运行都看=左边。
22.String toString（）：将对象变成字符串，默认返回格式：类名@哈希值 
		= getClass().getName()+'@'+Integer.toHexString(hashCode())
23.异常java.lang.Throwable
	--Error
	--Exception
		--RuntimeException
		--其他的Exception
	异常消息catch (Exception e) { //e用于接收try检测到的异常对象。
			System.out.println("message:"+e.getMessage());//获取的是异常的信息。
			System.out.println("toString:"+e.toString());//获取的是异常的名字+异常的信息。
			e.printStackTrace();//打印异常在堆栈中信息；异常名称+异常信息+异常的位置。
		}
	throw和throws的区别
		throw用于抛出异常对象，后面跟的是异常对象，throw用在函数内。
		throws用于抛出异常类，后面跟的是异常类名，可以跟多个，用逗号隔开，throws用在函数上。
	定义异常处理时，什么时候定义try，什么时候定义throws呢
		功能内部如果出现异常，如果内部可以处理，就用try,如果功能内部处理不了，就必须声明出来，让调用者处理。
24.java常用的软件包
	如果导入的两个软件包中存在着相同名称的类，这时如果用到该类，必须在代码中指定包名。
	java.lang：language java的核心包。
	java.awt：定义的都是用于java图形界面开发的对象。
	java.swing：提供所有的windows桌面应用程序包括的组件，Frame，Table。
	java.net：定义java网络编程方面的对象。
	java.io：input output用于操作设备上数据的对象都在该包中。
	java.util ：java的工具包，时间对象，集合框架。
	java.applet：application+let客户端Java小程序。
25.线程
	返回当前线程的名称：Thread.currentThread().getName()。
	start()方法，启动了线程，并让jvm调用了run方法。
	创建线程的第一种方式：继承Thread ，由子类复写run方法。
		步骤：
		1）定义类继承Thread类。
		2）目的是复写run方法，将要让线程运行的代码都存储到run方法中。
		3）通过创建Thread类的子类对象，创建线程对象。
		4）调用线程的start方法，开启线程，并执行run方法。
		调用方法：Person person = new Person() --> person.start()。
	创建线程的第二种方式：实现一个接口Runnable。
		步骤：
		1）定义类实现Runnable接口。
		2）覆盖接口中的run方法（用于封装线程要运行的代码）。
		3）通过Thread类创建线程对象；
		4）将实现了Runnable接口的子类对象作为实际参数传递给Thread类中的构造函数。
		为什么要传递呢？因为要让线程对象明确要运行的run方法所属的对象。
		5）调用Thread对象的start方法。开启线程，并运行Runnable接口子类中的run方法。
			Ticket t = new Ticket();
			Thread t1 = new Thread(t); //创建线程。
			t1.start();
	为什么要有Runnable接口的出现
		因为实现Runnable接口可以避免单继承的局限性。
		Runnable接口将线程线程要执行的任务封装成了对象。
	多线程安全问题的解决方法：就是同步代码块。
		格式：
		synchronized(对象) {  // 任意对象都可以。这个对象就是锁。
			需要被同步的代码；
		}
26.关于同步
	等待唤醒机制涉及的方法：
		wait：将同步中的线程处于冻结状态，释放了执行权，释放了资格，同时将线程对象存储到线程池中。
		notify:唤醒线程池中某一个等待的线程。
		notifyAll：唤醒的是线程池中的所有线程。
	上面这些方法都需要定义在同步块中。
		wait和sleep的区别
		wait：可以指定时间也可以不指定时间，不指定时间时，只能由对应的notify或notifyAll来唤醒。
		sleep：必须指定时间，时间到自动从冻结状态转成运行状态（临时阻塞状态）。
		wait：线程会释放执行权，而且线程会释放锁。
		sleep：线程会释放执行权，但不会释放锁。
	线程的停止
		定义循环的结束标记。
		如果线程处于冻结状态，是不可能读到标记的，这是就需要通过线程Thread类中的interrupt方法，将其冻结状态强行解除，
			让线程恢复具备执行资格的状态，让线程可以读到标记，并结束。
	Thread常用方法
		getPriority（）：返回线程的优先级。
		toString（）：返回该线程的字符串表示形式，包括线程名称，优先级和线程组。
		Thread.yield（）：暂停当前正在执行的线程对象，并执行其他线程。
		join（）：临时加入一个线程，当A线程执行到了B线程的join方式，A线程处于冻结状态，释放执行权，B开始执行；
			A什么时候执行呢，当B线程运行结束后，A才从冻结状态恢复到运行状态执行。
27.Lock接口
	同步synchronized是隐式的锁操作，而Lock对象是显示的锁操作。
	Lock接口中并没有直接操作等待唤醒的方法，而是将这些方式又单独封装到一个对象中，这个对象就是Condition。
		将Object中的三个方法进行单独的封装，并提供了功能一致的方法：await（），signal（），signalAll（）。
28.String<java.lang>
	字符串一旦被初始化，就不可以被改变，存放在方法区中的常量池中。
	String s1 = "abc" //s1指向内存中只有一个对象abc
	String s2 = new String("abc"); //s2指向内存中有两个对象abc new 
	拼字符串时不用for循环，因为会创建多个对象，浪费内存空间。
	字符串中equals比较的是字符串内容是否相同。
	String常用方法（important）
		构造方法：将字符数组或者字节数组转成字符串
			new String(char[])
		1)获取
			length()：获取字符串的长度。
			char charAt(int index):获取指定位置的字符。
			int indexOf(char ch):获取第一次找到的字符角标，如果不存在就返回-1。
			int indexOf(String str):获取第一次找到的字符串角标。
			int lastIndexOf(char ch)。
			String substring(int start,int end):获取子字符串，[start，end)。
		2)判断
			boolean contains(String substring):是否包含指定的字符串。
			boolean startsWith(String):是否以指定字符串开头。
			boolean endsWith(String)。
			boolean equals(String):覆盖了Object中的方法，判断内容是否相同。
			boolean equalsIgnoreCase(String)。
		3)转换
			通过构造方法可以将字符数组或者字节数组转成字符串。
			static String valueOf(char[]):通过静态方法，将字符数组转成字符串。
			将基本数据类型或者对象转成字符串。
				static String valueOf(char)
				static String valueOf(boolean)
				static String valueOf(double)
				static String valueOf(float)
				static String valueOf(int)
				static String valueOf(long)
				static String valueOf(Object)
			将字符串转成大小写
				String toLowerCase();
				String toUpperCase();
			将字符串转成数组
				char[] toCharArray() //转成字符数组。
				String[] split(分割的规则-字符串) //切割方法。
				byte[] getBytes() //可以加入编码表，转成字节数组。
			将字符串进行内容替换 注意：修改后变成新的字符串，并不是将原字符串直接修改。
				String replace(oldChar,newChar)
				String replace(oldString,newString)
				String replaceAll(String regex,String replacement)
				String concat(string) //对字符串进行追加
				String trim(string) //去除字符串两端的空格
29.StringBuffer字符缓冲区<java.lang>   ---字符串本身发生变化。
		构造一个其中不带字符的字符串缓冲区，初始容量为16个字符。
		特点：
			可以对字符串内容进行修改。
			是一个可边长度的容器。
			缓冲区可以存储任意类型的数据。
			最终需要变成字符串。
		添加
			StringBuffer append(data):在缓冲区中追加数据，追加到尾部。
			StringBuffer insert(index,data):在指定位置插入数据。
		删除
			StringBuffer delete(start,end)：删除从start到end-1范围的元素。
			StringBuffer deleteCharAt(index):删除指定位置的元素。
			StringBuffer.delete(0,sb.length):清空缓存区。
		修改
			StringBuffer replace(start,end,string)
			void setCharAt(index,char):替换指定位置的字符。
			void setLength(len):将原字符串设置为指定长度的字符串，多余元素会删除。
		查找
			int indexOf(string) / lastIndexOf(string)
			String substring(start,end):获取子串。
		反转
			StringBuffer reverse():字符串反转。
30.StringBuilder字符串缓冲区<java.lang>   ---字符串本身发生变化。
	构造其中一个不带字符的字符串生成器，初始容量为16个字符，用作StringBuffer的一个简易替换，用在字符串缓冲区被单个线程使用的情况。
	StringBuffer和StringBuilder的区别：
		StringBuffer线程安全，多线程操作时安全。
		StringBuilder线程不安全，单线程操作时效率高。
	方法和StringBuffer一样。
	经典案例
		class  Test{
			public static void main(String[] args) {
				String s1 = "java";
				String s2 = "hello";
				method_1(s1,s2);
				System.out.println(s1+"...."+s2); //java....hello
				
				StringBuilder s11 = new StringBuilder("java");
				StringBuilder s22 = new StringBuilder("hello");
				method_2(s11,s22);
				System.out.println(s11+"-----"+s22); //javahello-----hello
			}
			public static void method_1(String s1,String s2){
				s1.replace('a','k');
				s1 = s2;
			}
			public static void method_2(StringBuilder s1,StringBuilder s2){
				s1.append(s2);
				s1 = s2;
			}
		}
31.Integer对象
	Integer.parseInt(numString):将数字格式字符串转成基本数据类型。
	Integer.toBinaryString:将一个十进制转成二进制。
	Integer.toOctalString:将一个十进制转成八进制。
	Integer.toHexString:将一个十进制转成十六进制。
	将给定的数值转换成指定的基数进制
		Integer.parseInt(String,radix)
		Integer.parseInt("1010",2) ---|10
		Integer.parseInt("-FF",16) ---|-255
32.Collection接口<java.util>
	添加
		add(object):添加一个元素。
		add(collection):添加一个集合中所有元素。
	删除
		clear():清空集合。
		remove(object):删除集合中指定元素 注意：删除成功，集合的长度会发生改变。
		removeAll(collection):删除部分元素。
	判断
		boolean contains(object):集合中是否包含指定元素。
		boolean isEmpty():集合中是否有元素。
	获取
		int size():集合中有几个元素。
		Iterator iterator():迭代器获取元素。 ---迭代器是一个接口，用于取集合中的元素。
	将集合变成数组
		toArray()。	
33.List接口<java.util>		
	List:有序（元素存入集合的顺序和取出的顺序一致），元素有索引，元素可以重复。
		--ArrayList：底层的数据结构是数组，线程不同步，替代了Vector，查询元素的速度非常快。
		--LinkedList：底层的数据结构是链表，线程不同步，增删元素的速度非常快。
		--Vector：底层的数据结构是数组，线程同步，无论查询和增删都巨慢。
	有Collection接口的一切方法。
		Object get(index):通过索引获得指定元素。
		List subList(start,end):获取子列表。
		Object set(index,element):对指定索引位置元素进行修改。
		获取所有元素
			ListIterator listInterator():list集合特有的迭代器。
	List集合支持对元素的增、删、改、查---CRUD。
	可变长度数组的原理
		当元素超出数组长度时，会产生一个新的数组，将原数组的数据复制到新数组中，再将新的元素添加到新数组中。
		ArrayList：是按照原数组的50%延长，构造一个初始容量为10的空列表。
		Vector：是按照原数组的100%延长。
	LinkedList的几个特有方法
		添加：offerFisrst()  offerLast()
		得到：peekFirst():获取链表中的第一个元素，如果链表为空，返回null。---peekLast()
		删除: pollFirst() pollLast()
34.Set接口<java.util>
	Set接口中的方法和Collection接口中的方法一致。Set接口取出方式只有一种：迭代器。
	--HashSet：底层数据结构是哈希表，线程是不同步的，无序，高效。
		HashSet集合保证元素唯一性：通过元素的hashCode方法和equals方法完成。当元素的hashCode值相同时，
		才继续判断元素的equals是否为true。如果为true，那么视为相同元素，不存。如果为false，那么存储。
		如果hashCode值不同，那么不判断equals，从而提高对象比较的速度。
		--LinkedHashSet：有序，HashSet的子类。
	--TreeSet：对Set集合中的元素进行制定顺序的排序，不同步，TreeSet底层的数据结构就是二叉树。
	哈希表的原理：
		1，对对象元素中的关键字(对象中的特有数据)，进行哈希算法的运算，并得出一个具体的算法值，这个值 称为哈希值。
		2，哈希值就是这个元素的位置。
		3，如果哈希值出现冲突，再次判断这个关键字对应的对象是否相同。如果对象相同，就不存储，因为元素重复。如果对象不同，
			就存储，在原来对象的哈希值基础 +1顺延。
		4，存储哈希值的结构，我们称为哈希表。
		5，既然哈希表是根据哈希值存储的，为了提高效率，最好保证对象的关键字是唯一的。这样可以尽量少的判断
			关键字对应的对象是否相同，提高了哈希表的操作效率。
		对于ArrayList集合，判断元素是否存在，或者删元素底层依据都是equals方法。
		对于HashSet集合，判断元素是否存在，或者删除元素，底层依据的是hashCode方法和equals方法。		
		如果元素不具备比较性，在运行时就会发生ClassCastException异常。
		TreeSet集合排序有两种方式，Comparable和Comparator区别：
			1：让元素自身具备比较性，需要元素对象实现Comparable接口，覆盖compareTo方法。
			2：让集合自身具备比较性，需要定义一个实现了Comparator接口的比较器，并覆盖compare方法，
				并将该类对象作为实际参数传递给TreeSet集合的构造函数。（此方式较为灵活）
35.Map集合<java.util>
	--Hashtable:底层是哈希表数据结构，线程同步，不可以存储null键，null值。
	--HashMap：底层是哈希表数据结构，线程不同步，可以存储null键，null值，替代了Hashtable。
	--TreeMap：底层是二叉树结构，可以对map集合中的键进行指定顺序的排序。
	Map集合存储和Collection有着很大不同：
		Collection一次存一个元素；Map一次存一对元素。
		Collection是单列集合；Map是双列集合。
		Map中的存储的一对元素：一个是键，一个是值，键与值之间有对应(映射)关系。
		特点：要保证map集合中键的唯一性。
	添加
		put(key,value):当存储的键相同时，新的值会替换老的值。
		void putAll(Map)
	删除
		void clear():清空。
		value remove(key):删除指定键。
	判断
		boolean isEmpty()
		boolean containsKey()：是否包含key。
		boolean containsValue()
	取出
		int size()
		value get(key)：通过指定键获取对应的值，如果返回的null，可以判断键不存在。
		Collection values():获取map集合中的所有值。
	想要获取Map中的元素
		原理：map是没有迭代器的，（Map和Collection是同一个级别的）collection接口具有迭代器，只要将Map集合转成Set集合，
			就可以使用迭代器了。之所以转成Set，是因为Map集合具备着键的唯一性，其实Set集合就来自由Map，Set集合底层其实用的
			就是Map的方法。
	把Map集合转成Set的方法
		Set keySet()
		Set entrySet()://取的是键和值的映射关系。
		Entry是Map接口中的内部接口，是访问键值关系的入口，是map的入口，访问的是map中的键值对。
		取出map集合中所有元素的方式一：keySet()方法。
			可以将map集合中的键都取出存放到set集合中。对set集合进行迭代。迭代完成，再通过get方法对获取到的键进行值的获取。
			Set keySet = map.keySet();
			Iterator it = keySet.iterator();
			while(it.hasNext()) {
				Object key = it.next();
				Object value = map.get(key);
				System.out.println(key+":"+value);
			}
		取出map集合中所有元素的方式二：entrySet()方法。
			Set entrySet = map.entrySet();
			Iterator it = entrySet.iterator();
			while(it.hasNext()) {
				Map.Entry  me = (Map.Entry)it.next();
				System.out.println(me.getKey()+"::::"+me.getValue());
			}	

36.使用集合的技巧
	看到Array就是数组结构，有角标，查询速度很快。
	看到linked就是链表结构：增删速度快，而且有特有方法。addFirst； addLast； removeFirst()； removeLast()； getFirst()；getLast()；
	看到hash就是哈希表，就要想要哈希值，就要想到唯一性，就要想到存入到该结构的中的元素必须覆盖hashCode，equals方法。
	看到tree就是二叉树，就要想到排序，就想要用到比较。
	比较的两种方式：
		一个是Comparable：覆盖compareTo方法；
		一个是Comparator：覆盖compare方法。
	LinkedHashSet，LinkedHashMap:这两个集合可以保证哈希表有存入顺序和取出顺序一致，保证哈希表有序。
	集合什么时候用？
		当存储的是一个元素时，就用Collection。当存储对象之间存在着映射关系时，就使用Map集合。
	保证唯一，就用Set/Map。不保证唯一，就用List。		
37.Collections：它的出现给集合操作提供了更多的功能。这个类不需要创建对象，内部提供的都是静态方法。
	Collections.sort(list);//list集合进行元素的自然顺序排序。
	Collections.sort(list,new ComparatorByLen());//按指定的比较器方法排序。
		class ComparatorByLen implements Comparator<String>{
			public int compare(String s1,String s2){
				int temp = s1.length()-s2.length();
				return temp==0?s1.compareTo(s2):temp;
			}
		}
	Collections.max(list); //返回list中字典顺序最大的元素。
	int index = Collections.binarySearch(list,"zz");//二分查找，返回角标。
	Collections.reverseOrder();//逆向反转排序。
	Collections.shuffle(list);//随机对list中的元素进行位置的置换。
	将非同步集合转成同步集合的方法：Collections中的  XXX synchronizedXXX(XXX);
	List synchronizedList(list);
	Map synchronizedMap(map);
	原理：定义一个类，将集合所有的方法加同一把锁后返回。
	Collection 和 Collections的区别：
		Collections是个java.util下的类，是针对集合类的一个工具类,提供一系列静态方法,实现对集合的查找、排序、替换、
			线程安全化（将非同步的集合转换成同步的）等操作。
		Collection是个java.util下的接口，它是各种集合结构的父接口，继承于它的接口主要有Set和List,
			提供了关于集合的一些操作,如插入、删除、判断一个元素是否其成员、遍历等。
38.Arrays:用于操作数组对象的工具类，里面都是静态方法。
39.jdk5.0新特性
	增强for循环
		使用时，必须明确被遍历的目标，可以使Collection集合或者数组。
		Map可以用它遍历吗：不可以，但将map转为set后可以使用它遍历。
		1)、作用：对存储对象的容器进行迭代： 数组  collection   map
		2)、增强for循环迭代数组：
			String [] arr = {"a", "b", "c"};//数组的静态定义方式，只试用于数组首次定义的时候
			for(String s : arr) {
				System.out.println(s);	
			}
		3)、单列集合 Collection：
			List list = new ArrayList();
			list.add("aaa"); // 增强for循环, 没有使用泛型的集合能不能使用增强for循环迭代？能
			for(Object obj : list) {
				String s = (String) obj;
				System.out.println(s);
			}
		4)、双列集合 Map：
			Map map = new HashMap();
			map.put("a", "aaa");  // 传统方式：必须掌握这种方式
			Set entrys = map.entrySet(); // 1.获得所有的键值对Entry对象
			iter = entrys.iterator(); // 2.迭代出所有的entry
			while(iter.hasNext()) {
				Map.Entry entry = (Entry) iter.next();
				String key = (String) entry.getKey(); // 分别获得key和value
				String value = (String) entry.getValue();
				System.out.println(key + "=" + value);
			}
		// 增强for循环迭代：原则上map集合是无法使用增强for循环来迭代的，因为增强for循环只能针对实现了
			Iterable接口的集合进行迭代；Iterable是jdk5中新定义的接口，就一个方法iterator方法，只有
			实现了Iterable接口的类，才能保证一定有iterator方法，java有这样的限定是因为增强for循环内部
			还是用迭代器实现的，而实际上，我们可以通过某种方式来使用增强for循环。
			for(Object obj : map.entrySet()) {
				Map.Entry entry = (Entry) obj;  // obj 依次表示Entry
				System.out.println(entry.getKey() + "=" + entry.getValue());
			}
		5）、集合迭代注意问题：在迭代集合的过程中，不能对集合进行增删操作（会报并发访问异常）；可以用迭代器的
			方法进行操作（子类listIterator：有增删的方法）。
		6)、增强for循环注意问题：在使用增强for循环时，不能对元素进行赋值；
			int[] arr = {1,2,3};
			for(int num : arr) {
				num = 0; //不能改变数组的值
			}
			System.out.println(arr[1]); //2
		
		可变参数（...）：用在函数的参数上，当要操作的同一个类型元素个数不确定时，可以用这个方式，这个参数可以接收任意
			个数的同一类型的数据。可变参数必须定义在参数列表末尾，否则编译会出错。
40.System属性和行为都是静态的<java.lang>
	long currentTimeMillis(); // 返回当前时间毫秒值
	exit();  // 退出虚拟机
	Properties getProperties() ;  // 获取当前系统的属性信息
	Properties prop = System.getProperties(); //获取系统的属性信息，并将这些信息存储到Properties集合中。 
	System.setProperty("myname","毕老师"); //给系统属性信息集添加具体的属性信息
	//临时设置方式：运行jvm时，可以通过jvm的参数进行系统属性的临时设置，可以在java命令的后面加入 –D<name>=<value> 
		用法：java –Dmyname=小明 类名。
	String name = System.getProperty("os.name");//获取指定属性的信息
41.Math<java.util>用于数学运算的工具类，属性和行为都是静态的，该类是final不允许继承
	static double ceil(double a) ; //返回大于指定数值的最小整数---向上取整
	static double floor(double a) ; //返回小于指定数值的最大整数---向下取整
	static long round(double a) ; //四舍五入成整数
	static double pow(double a, double b) ; //a的b次幂
	static double random(); //返回0~1的伪随机数
42.Date<java.util>：日期类
	日期对象和毫秒值之间的转换
		Date d = new Date(); //日期对象转成毫秒值
		long time1 = d.getTime();
		long time2 = System.currentTimeMillis(); / /毫秒值。
		long time = 1322709921312l; //毫秒值转成具体的日期
		Date d = new Date();
		d.setTime(time);
	日期格式到字符串的转化
		Date d = new Date();
		DateFormat df = DateFormat.getDateInstance(DateFormat.LONG);    2015年8月17号
		df = DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);  2015年8月17号 下午 03时10分02秒
		String str_time = df.format(d);
	创建日期格式对象自定义日期
		DateFormat df = new SimpleDateFormat();  //该对象的建立内部会封装一个默认的日期格式。11-12-1 下午1:48
		df = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
		String str_time = df.format(d);  //调用DateFormat中的format方法。对已有的日期对象进行格式化。
43.Calendar<java.util>：日历类
	Calendar c = Calendar.getInstance();
	System.out.println(c.get(Calendar.YEAR)+"年"+(c.get(Calendar.MONTH)+1)+"月"
						+getNum(c.get(Calendar.DAY_OF_MONTH))+"日"
						+"星期"+getWeek(c.get(Calendar.DAY_OF_WEEK)));
44.IO流
	FileWriter fw = new FileWriter("demo.txt"); // FileNotFoundException
	调用Writer类中的write方法写入字符串。字符串并未直接写入到目的地中，而是写入到了流中，(其实是写入到内存缓冲区中)。
	文件写入的核心代码
		fw.write("abcde");
		fw.flush(); // 刷新缓冲区，将缓冲区中的数据刷到目的地文件中。
		fw.close(); // 关闭流，其实关闭的就是java调用的系统底层资源。在关闭前，会先刷新该流。
	close()和flush()的区别：
		flush()：将缓冲区的数据刷到目的地中后，流可以使用。
		close()：将缓冲区的数据刷到目的地中后，流就关闭了，该方法主要用于结束调用的底层资源。这个动作一定做。
	io异常的处理方式：io一定要写finally；
	FileWriter写入数据的细节：
		1：window中的换行符：\r\n两个符号组成。 linux：\n。
		2：续写数据，只要在构造函数中传入新的参数true。
		3：目录分割符：window \\  /	
	文件读取
		第一种：直接读取
			FileReader fr = new FileReader("demo.txt");
			int ch = 0;
			while((ch = fr.read())!= -1) { //条件是没有读到结尾
				System.out.println((char)ch); //调用读取流的read方法，读取一个字符。
			}
			fr.close();
		第二种：较为高效，自定义缓冲区。（文件读取的核心代码）
			FileReader fr = new FileReader("demo.txt"); //创建读取流对象和指定文件关联。
			//因为要使用read(char[])方法，将读取到字符存入数组。所以要创建一个字符数组，一般数组的长度都是1024的整数倍。
			char[] buf = new char[1024];
			int len = 0;
			while(( len=fr.read(buf)) != -1) {
				System.out.println(new String(buf,0,len));
			}
			fr.close();
		转换流最强功能计时基于 字节流+编码表
			FileReader fr = new FileReader("a.txt");
			InputStreamReader isr = new InputStreamReader(new FileInputStream("a.txt"),"gbk");
			以上两句代码功能一致，
			如果仅仅使用平台默认码表，就使用FileReader fr = new FileReader("a.txt"); //因为简化。
45.File类：将文件系统中的文件和文件夹封装成了对象。提供了更多的属性和行为可以对这些文件和文件夹进行操作。
	这些是流对象办不到的，因为流只操作数据。
	1：创建。
		boolean createNewFile()：在指定目录下创建文件，如果该文件已存在，则不创建。
			而对操作文件的输出流而言，输出流对象已建立，就会创建文件，如果文件已存在，会覆盖。除非续写。
		boolean mkdir()：创建此抽象路径名指定的目录。
		boolean mkdirs()：创建多级目录。 
	2：删除。
		boolean delete()：删除此抽象路径名表示的文件或目录。
		void deleteOnExit()：在虚拟机退出时删除。
		注意：在删除文件夹时，必须保证这个文件夹中没有任何内容，才可以将该文件夹用delete删除。
		window的删除动作，是从里往外删。注意：java删除文件不走回收站。要慎用。
	3：获取.
		long length()：获取文件大小。
		String getName()：返回由此抽象路径名表示的文件或目录的名称。
		String getPath()：将此抽象路径名转换为一个路径名字符串。
		String getAbsolutePath()：返回此抽象路径名的绝对路径名字符串。
		String getParent()：返回此抽象路径名父目录的抽象路径名，如果此路径名没有指定父目录，则返回 null。
		long lastModified()：返回此抽象路径名表示的文件最后一次被修改的时间。
		File.pathSeparator：返回当前系统默认的路径分隔符，windows默认为 “；”。
		File.Separator：返回当前系统默认的目录分隔符，windows默认为 “\”。
	4：判断：
		boolean exists()：判断文件或者文件夹是否存在。
		boolean isDirectory()：测试此抽象路径名表示的文件是否是一个目录。
		boolean isFile()：测试此抽象路径名表示的文件是否是一个标准文件。
		boolean isHidden()：测试此抽象路径名指定的文件是否是一个隐藏文件。
		boolean isAbsolute()：测试此抽象路径名是否为绝对路径名。
	5：重命名。
	 	boolean renameTo(File dest)：可以实现移动的效果。剪切+重命名。
	String[] list()：列出指定目录下的当前的文件和文件夹的名称。包含隐藏文件。
46.RandomAccessFile类
	特点：
		该对象即可读取，又可写入。
		该对象中的定义了一个大型的byte数组，通过定义指针来操作这个数组。
		可以通过该对象的getFilePointer()获取指针的位置，通过seek()方法设置指针的位置。
		该对象操作的源和目的必须是文件。 
		其实该对象内部封装了字节读取流和字节写入流。
		注意：实现随机访问，最好是数据有规律。
	代码
		RandomAccessFile raf = new RandomAccessFile("random.txt","[r,rw]");//只读模式。
		raf.seek(8*1); //指定指针的位置。 实现随机读取文件中的数据。注意：数据最好有规律。
		System.out.println("pos1 :"+raf.getFilePointer());
		raf.write("lvoline".getBytes());
		raf.writeInt(23);
		raf.close();
47.DataOutputStream/DateInputStream:专门用于操作基本数据类型的对象，有readXXX,writeXXX方法。
48.UDP网络编程
	udp的发送端
		1）建立udp的socket服务，创建对象时如果没有明确端口，系统会自动分配一个未被使用的端口。
		2）明确要发送的具体数据。
		3）将数据封装成了数据包。
		4）用socket服务的send方法将数据包发送出去。
		5）关闭资源。
			//1，建立udp的socket服务。
			DatagramSocket ds = new DatagramSocket(8888);//指定发送端口，不指定系统会随机分配。
			//2，明确要发送的具体数据。
			String text = "udp传输演示 哥们来了";
			byte[] buf = text.getBytes();
			//3，将数据封装成了数据包。
			DatagramPacket dp = new DatagramPacket(buf,
			buf.length,InetAddress.getByName("10.1.31.127"),10000);
			//4，用socket服务的send方法将数据包发送出去。
			ds.send(dp);
			//5，关闭资源。
			ds.close();
	udp的接收端
		1）创建udp的socket服务，必须要明确一个端口，作用在于，只有发送到这个端口的数据才是这个接收端可以处理的数据。
		2）定义数据包，用于存储接收到数据。
		3）通过socket服务的接收方法将收到的数据存储到数据包中。
		4）通过数据包的方法获取数据包中的具体数据内容，比如ip、端口、数据等等。
		5)关闭资源。
			//1，创建udp的socket服务。
			DatagramSocket ds = new DatagramSocket(10000);
			//2，定义数据包，用于存储接收到数据。先定义字节数组，数据包会把数据存储到字节数组中。
			byte[] buf = new byte[1024];
			DatagramPacket dp = new DatagramPacket(buf,buf.length);
			//3，通过socket服务的接收方法将收到的数据存储到数据包中。
			ds.receive(dp);//该方法是阻塞式方法。
			//4，通过数据包的方法获取数据包中的具体数据内容，比如ip，端口，数据等等。
			String ip = dp.getAddress().getHostAddress();
			int port = dp.getPort();
			String text = new String(dp.getData(),0,dp.getLength());//将字节数组中的有效部分转成字符串。
			System.out.println(ip+":"+port+"--"+text);
			//5，关闭资源。
			ds.close();
49.TCP网络编程
	tcp客户端
		1）建立tcp的socket服务，最好明确具体的地址和端口。这个对象在创建时，就已经可以对指定ip和端口进行连接(三次握手)。
		2）如果连接成功，就意味着通道建立了，socket流就已经产生了。只要获取到socket流中的读取流和写入流即可，
			只要通过getInputStream和getOutputStream就可以获取两个流对象。
		3）关闭资源。	
			Socket s = new Socket("10.1.31.69",10002);
			OutputStream out = s.getOutputStream();//获取了socket流中的输出流对象。
			out.write("tcp演示，哥们又来了!".getBytes());
			s.close();
	tcp服务器端
		1）创建服务端socket服务，并监听一个端口。
		2）服务端为了给客户端提供服务，获取客户端的内容，可以通过accept方法获取连接过来的客户端对象。
		3）可以通过获取到的socket对象中的socket流和具体的客户端进行通讯。
		4)如果通讯结束，关闭资源。注意：要先关客户端，再关服务端。
			ServerSocket ss = new ServerSocket(10002);//建立服务端的socket服务
			Socket s = ss.accept();//获取客户端对象
			String ip = s.getInetAddress().getHostAddress();
			System.out.println(ip+".....connected");
			//可以通过获取到的socket对象中的socket流和具体的客户端进行通讯。
			InputStream in = s.getInputStream();//读取客户端的数据，使用客户端对象的socket读取流
			byte[] buf = new byte[1024];
			int len = in.read(buf);
			String text = new String(buf,0,len);
			System.out.println(text);
			//如果通讯结束，关闭资源。注意：要先关客户端，在关服务端。
			s.close();
			ss.close();	
50.获取Class对象，有三种方式：
	1)：通过每个对象都具备的方法getClass来获取。弊端：必须要创建该类对象，才可以调用getClass方法。
	2)：每一个数据类型(基本数据类型和引用数据类型)都有一个静态的属性class。弊端：必须要先明确该类。
		 前两种方式不利于程序的扩展，因为都需要在程序使用具体的类来完成。
	3)：使用的Class类中的方法，静态的forName方法。
		 指定什么类名，就获取什么类字节码文件对象，这种方式的扩展性最强，只要将类名的字符串传入即可。
		// 1. 根据给定的类名来获得  用于类加载
		String classname = "cn.itcast.reflect.Person";// 来自配置文件
		Class clazz = Class.forName(classname);// 此对象代表Person.class
		// 2. 如果拿到了对象，不知道是什么类型   用于获得对象的类型
		Object obj = new Person();
		Class clazz1 = obj.getClass();// 获得对象具体的类型
		// 3. 如果是明确地获得某个类的Class对象  主要用于传参
		Class clazz2 = Person.class;	